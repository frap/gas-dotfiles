#+TITLE:  Shell Dot Profile
#+AUTHOR: Andrés Gasson
#+EMAIL:  agasson@red-elvis.net
#+DATE:   [2016-11-03 Wed]
#+TAGS:   zsh shell

This generates my =.profile= that contains environment variables and
similar settings applicable to all my shells.

* Homebrew

  Make sure that [[http://brew.sh/][Homebrew]] is both installed and configured correctly.

#+BEGIN_SRC sh
  if which osascript >/dev/null 2>&1
  then
    export ON_A_MAC=1
  fi

  if [ ! -d /usr/local/Cellar -a -n "$ON_A_MAC" ]
  then
    echo "WTF! No Homebrew installed! Installing now..."
    ruby -e "`curl -fsSL https://raw.github.com/mxcl/homebrew/go/install`"
  fi
#+END_SRC

* Path

   We want to add these directories, but only if they exist. This
   makes this more portable between my computers.

#+BEGIN_SRC sh
  OLDPATH=$PATH
  PATH=$HOME/bin

  for DIR in $HOME/repos/ansible/bin /opt/local/bin /opt/local/sbin /usr/local/bin /usr/local/sbin
  do
    if [ -d $DIR ]
    then
        PATH=$PATH:$DIR
    fi
  done

  for PYDIR in $HOME/repos/ansible/lib
  do
    if [ -d $PYDIR ]
    then
        PYTHONPATH=$PYDIR:$PYTHONPATH
    fi
  done

  PATH=$PATH:$OLDPATH
  export PYTHONPATH
#+END_SRC

* SSH
  Need to setup my ssh-agent properly
#+BEGIN_SRC sh :tangle no
  SSH_ENV="$HOME/.ssh/environment"

  function start_agent {
      echo "Initialising new SSH agent..."
      /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
      echo succeeded
      chmod 600 "${SSH_ENV}"
      . "${SSH_ENV}" > /dev/null
      /usr/bin/ssh-add;
  }

  # Source SSH settings, if applicable

  if [ -f "${SSH_ENV}" ]; then
      . "${SSH_ENV}" > /dev/null

      ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
          start_agent;
      }
  else
      start_agent;
  fi

  # Add atearoot key to ssh-agent keys
  if [ -f ~/.ssh/atearoot_rsa.pem ]; then
      ssh-add ~/.ssh/atearoot_rsa.pem
  fi
#+END_SRC
* Emacs

  Set =EDITOR= to start up an =emacsclient=, but do that from the one
  I built from Homebrew:

  Note: test -n => string is NOT null
        test -z => string is null, aka has zero length

#+BEGIN_SRC sh
  if [ -n "$ON_A_MAC" ]
   then
    export ALTERNATE_EDITOR=/usr/local/bin/emacs
    export EDITOR=/usr/local/bin/emacsclient
   else
    ED=$(which emacs | grep -v no)
    if [ -z $ED ];     # No emacs on linux machine
    then
       export EDITOR=$(which vi)
    else
       export ALTERNATE_EDITOR=$ED
       export EDITOR=$(which emacsclient)
    fi
  fi
#+END_SRC

* Global Aliases

  Rsync I want to maintain attributes but follow links as well as show
  progress and be restartable.

#+BEGIN_SRC sh
  alias more=less
  alias rsync="rsync -avzP"
#+END_SRC

* Clojure

  I use boot so want to speed it up in the JVM.

#+BEGIN_SRC sh
  export BOOT_JVM_OPTIONS="-client \
                           -XX:+TieredCompilation \
                           -XX:TieredStopAtLevel=1 \
                           -Xmx2g \
                           -XX:+UseConcMarkSweepGC \
                           -XX:+CMSClassUnloadingEnabled \
                           -Xverify:none"
#+END_SRC

* NPM
 npm on mac
#+BEGIN_SRC sh
  if [ -n "$ON_A_MAC" ]
   then
   export NPM_PACKAGES="/usr/local/npm_packages"
   export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
   export PATH="$NPM_PACKAGES/bin:$PATH"
  fi
#+END_SRC
* SQL
  sql on mac is in Application directory
  #+BEGIN_SRC sh
  if [ -n "$ON_A_MAC" ]
   then
    export SQLPATH=~/bin
    export PATH=$PATH:/Applications/sqlcl/bin
   else
    SQL=$(which sql | grep -v no)
    if [ -z $SQL ];     # No sql on linux machine
    then
       export SQLPATH=$(which sqlplus)
    else
       export SQLPATH=~/bin
       export PATH=$PATH:/(which sql)
    fi
  fi
#+END_SRC
* Prompt

  A helper function to help trim down lengthy directories:

  #+BEGIN_SRC sh
    function _trim_dir {
        V='[[:alnum:]._-]'
        D='[[:alnum:]._/-]'
        sed -E "s|/$D+/($V+)|../\1|; s/ / /g" <<< $1
    }
  #+END_SRC

  The =__git_ps1= is nice, but can be lengthy when pulling down Gerrit
  reviews, so let's make a simpler branch:

  #+BEGIN_SRC sh
    function _mygit_ps1 {
      __git_ps1 " :%s" | sed 's|^ :review/.*/\([0-9]*\)$| :review-\1|'
    }
  #+END_SRC
  Better approach to displaying the current path, is to only display
  the first or second directory name ... any maybe the name of the Git
  project. Holy hell, so many exceptions and so few patterns...

  #+BEGIN_SRC sh
    function prompt_dir {
        PWD=$(pwd)

        if [[ $PWD == $HOME ]]
        then
            echo -n '~'
        elif [[ $PWD == $HOME/Dev ]]
        then
            echo -n '~/Dev'

             # In a Git project?
        elif PRJ=$(git rev-parse --show-toplevel 2>/dev/null)
        then
            name=$(basename $PRJ)
            rest=$(sed "s|$PRJ||" <<< $PWD)
            echo -n "$(sed -e 's/ / /g' <<< [$name])$(_trim_dir $rest)"

             # In work-related directory...
        elif [[ $PWD == $HOME/Dev/* ]]
        then
            name=$(sed -E "s|$HOME/Dev/([[:alnum:]_-]+).*|\1|; s/ / /g" <<< $PWD)
            base=$(basename $PWD)
            intr=$(basename `dirname $PWD`)

            if [[ $name == $base ]]
            then
                echo -n "Ⓦ/$name"
            elif [[ $intr == $name ]]
            then
                echo -n "Ⓦ/$name/$base"
            else
                echo -n "Ⓦ/$name/../$base"
            fi

             # In a home directory
        elif [[ $PWD == $HOME/* ]]
        then
            if [[ $(basename `dirname $PWD`) == $(basename $HOME) ]]
            then
                echo -n "~/$(basename $PWD)"
            else
                echo -n "~/$(_trim_dir $PWD)"
            fi
        else
            _trim_dir $PWD
        fi
    }
  #+END_SRC

  I wanna add everything to my command line prompt: the Git
  repository, the Python virtual environment (in white), the Ruby
  Virtual Environment (in red) ... of course, now I have no room to
  type commands. ;-)

  #+BEGIN_SRC sh
    export PS1='\[\e[1;34m\]$(prompt_dir)\[\e[1;32m\]$(_mygit_ps1)\[\e[0m\] \$ '

    if [ -d ~/.rvm ]
    then
        export PS1='\[\e[1;31m\]$(~/.rvm/bin/rvm-prompt v g)'"$PS1"
    fi
  #+END_SRC

  Good thing I seldom use a shell.

* Fuck

  [[https://github.com/nvbn/thefuck][TheFuck]] project seems fun and useful. Works better on Linux than on
  the Mac, but it still seems good:

  #+BEGIN_EXAMPLE
~ $ puthon
-bash: puthon: command not found
~ $ fuck
python [enter/↑/↓/ctrl+c]
Python 2.7.10 (default, Oct 23 2015, 18:05:06)
[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> ^D
  #+END_EXAMPLE

  We just need to install it with Homebrew:

  #+BEGIN_SRC sh :tangle no
    brew install thefuck
    ;or for linux
    sudo -H pip install thefuck
  #+END_SRC

  And then include it in this =.profile= file:

  #+BEGIN_SRC sh
    eval "$(thefuck --alias)"
  #+END_SRC
* My Function Collection

  Load up my [[file:sh-functions.org][shared functions]]. These can be shared with Bash, Fish and
  Zshell.

  #+BEGIN_SRC sh
    if [ -f $HOME/.sh-funcs.sh ]
    then
        . $HOME/.sh-funcs.sh
    fi
  #+END_SRC

  Host-specific values, are stored in a separate profile.

  #+BEGIN_SRC sh
    if [ -x $HOME/.profile-local ]
    then
      . $HOME/.profile-local
    fi
  #+END_SRC

* Technical Gunk

  Anything else that is interesting, will be set up in more
  either more shell-specific files, or in [[file:sh-functions.org][Shell Functions]] file.
  The following are the tangled settings. Type: =C-c C-v t=
  to create the script file.

#+PROPERTY: tangle ~/.profile
#+PROPERTY: comments org
#+PROPERTY: shebang #!/bin/sh
#+DESCRIPTION: Global environment variables for all shells
